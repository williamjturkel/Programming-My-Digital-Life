(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    234580,       6272]
NotebookOptionsPosition[    227022,       6026]
NotebookOutlinePosition[    228223,       6064]
CellTagsIndexPosition[    228143,       6059]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 TogglerBox[2, {1->
  OverlayBox[{
   TagBox[GridBox[{
      {
       GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCEFxAJADBL8//8/
Qfzo0SP2GzduCF29elXs/Pnz0sgYn747d+5wA9VoArE/EB8B4uPoGJu+Fy9e
MF+4cEENKB8AxBeB+AMQ/wXif+gYi1tBdvoB8QUg/ghV9x8XRtb7/PlzFqje
t1D7cOrDpv/ixYvqUHuJ0ousHxpWAVA3E6UXWT80nC8S8i82/Q8ePOAgx26Y
/uvXrwsD2UdJ8Tey/kuXLolD0wNJbofpB6YVSUr0n4ek5QHTT6n7KQ0/SuOP
0vRDafqlRv6BxgPZ+Ret/HhHrBl4yi9QWHwiFB7Yyk+QO6B+CTxPYvmJjG/f
vs17nozyG1f9cR6t7gBhAPeiQ4A=
         "], {{0, 26}, {16, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{16, 26},
        PlotRange->{{0, 16}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJzt2d9OVFcUB2DSNmkfQRFEiRQ1gCK1vW4fwT6BJu1tE9uk8fUUERE9aECC
qLGYEmKkErWxtont2mGdcDLVOpNgZijfJB9hzp+99j6zb9b5Hb3ww7nvP+rr
6/vxs/hz7vzPX1+8eP7St5/El28u/fTdhY/jn/6w8GlfXzlYVdWhDgyEwXT4
HQYbBho6qQMAAOxt/Q0HWxxo0TzX3xij7juGwpFwNAyHY2EkfB6OhxPhZBgL
42EinAqnw2SYSl+Es+HL9FWb6uvP5hj1eJNZ41TWHM85nMw5Hc85juSch3MN
R3JNdf/UfGbtPqf6WdW6/XsDAADsV7vd/7b2vqPV2/veuuc9k6Za1Mfr3vVt
feto9e+eVb9KL2tmz81M+n25dadZ9bU2zYXbYSmshNXwoOF+uJfn7obFcKfa
/twMN8L1MNtBTQAAYO+ZSVfTdLqSLreoj0/n9eXe0jeUHmQ+3AoL1XZ/UfqR
5Wq77yg9yMPwS3gcfg0b4Ul4Gn4LW+F5eBl+D6/CH+F1+DP99Q71+dd5z6sc
42WOuZU1nmbNjZzD45zTw5zjSs55KdewkGuazzXONp5Xu8+pflb185rpgd8d
AABgv/kQ/W/J4krGVvrIkruVDO5RWAvr1U7fuxmeVTt9b/Ei1d+38prNaqdv
Xc+xHuXY97LWYtbWr9Jryj4sGXPJmkvmXD7l/UrZsyWTLu9dyj4u72Ca2fVq
nivvY8renuug5ps2/b2L2q0JAADwX3azT/kQuv18AAAA2Pv0rOxn3djz3X6f
BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAADsHW/a1I2aAAAAAAAAsJ91OyOEburGnr/W
prlwOyyFlbAaHjTcD/fy3N2wGO5U25+b4Ua4HmY7qAkAAAAAAAC9aCZdTdPp
Srrcoj4+ndeXe0tuVjK4+XCr2s7iSsa2XG3nbiWDexTWwnrYCE/CZngWtsLz
9CLV37fyms28ZyPHWMsxH2SN5ax5O+cwn3Oabayv3XXVa6vXN9MDvxN7W9mH
JWMuWXPJnMunZNBlz5ZMumTTZR+XrLqZXa/muZJtl70910HNQx0YCIPp8DsM
Ngw0dFIHAAAAAAAAel1/w8EWB1o0z/U3xqhzt6FwNAyHY2EkjIYT4WQYC+Nh
IpwOk+FMmmpRH5/Mayfy3rEc60SOPZK1hrP2ULWT9zXX2O666rXVuv378P/S
zJ6bmfT7cuuOsup/AFmW9vs=
         "], {{0, 26}, {2000, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{2000, 26},
        PlotRange->{{0, 2000}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJy9lstOwkAUhhthQUJcuUBl5cr4GPoABvEJINGtCZoYng4Il4Z7gXAJYUHY
QAi3GlYQPZ5/4pCm0pYC2uSDaXvmn5lzzpzpVfQl/HyiKMqrj3/CkffbWCwS
f/TyzV387Snq4cYlc87gYbVaDbpB07SLRqMR6Pf7PiJSnOA+6h7kmBBz0+12
Tx30v/bgk9GZOvPAa7oejUYeC306AIz1wWjM/WAw8B9ZX4L1TDHGcDj02ulX
KpUNbt79jKHBV1b66Fcul3fCYgzEJNTr9fxmfaldKpWoUChQPp8X/8ViUWB8
BhuLMRCPGvJqmz76QWOxWFCtVqNsNku5XE6AdqfToclkImxga7cGuT/M+uw/
ms/ntF6vqdlsUjKZFKCNC/pynTZxyLbb7bNt/sHcMpkMzWYzoVev1wW4xuOx
WAdsbGIAH6ncJ7BNH/6FRjqdJl3XSV7T6VSsA76CDWxt9oSKOmLOH/RBLKEP
LVVVN/qJRGKjDxsnfSZoN3/4CPNfrVa/5n+IvtH/iDHu9/G/2T/G/JT5A41U
KiXm3Wq1xBhcx5zy0zK+Mj+Xy6XIf5n7EuQ/9sYh+Wneqy73r+3+2rX2OPh+
a31wqpHG5xbatvXtCDjW5wO1Z9UdzheXyPMRPrc6H49yvpvn/Y/fJ3/6ffUN
AyH/6w==
         "], {{0, 26}, {24, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{24, 26},
        PlotRange->{{0, 24}, {0, 26}}]}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {Automatic, 
         Scaled[0.6], Automatic}},
     GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
    "Grid"], 
   PaneBox[
    StyleBox[
     RowBox[{
     "Background", " ", "images", " ", "and", " ", "text", " ", "colors", " ",
       "have", " ", "been", " ", "adjusted", " ", "for", " ", "editing", " ", 
      
      RowBox[{"purposes", "."}]}],
     LineBreakWithin->False,
     FontFamily->"Helvetica",
     FontSize->12,
     FontColor->GrayLevel[0.4]],
    Alignment->Center,
    ImageSize->Scaled[0.5],
    ScrollPosition->{0., 0.}]},
   Alignment->{Center, Center}], 2->""}, "1"]], "SlideShowNavigationBar", \
"FirstSlide",
 CellMargins->{{0, 0}, {0, 0}},
 CellFrameLabelMargins->2,
 CellSize->{Inherited, 30},
 CellChangeTimes->{3.647361175465108*^9},
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell["\<\
Notebook 03:
Randomness\
\>", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.647331852839075*^9, 3.647331861295168*^9}, {
   3.647331922221755*^9, 3.647331924532915*^9}, {3.647332658962614*^9, 
   3.64733266480881*^9}, {3.6473611327373047`*^9, 3.647361139759391*^9}, {
   3.647448943135475*^9, 3.6474489472294493`*^9}, {3.658337416821965*^9, 
   3.65833742904038*^9}, {3.658337677781981*^9, 3.658337703010659*^9}, {
   3.658596891418371*^9, 3.658596898262995*^9}}],

Cell[TextData[{
 "William J Turkel, ",
 StyleBox["wturkel@uwo.ca",
  FontSlant->"Italic",
  FontColor->RGBColor[
   0.396078431372549, 0.596078431372549, 0.796078431372549]],
 "\nDigital Humanities 1011B"
}], "Subtitle",
 CellChangeTimes->{{3.647331955723979*^9, 3.6473319708190517`*^9}, 
   3.647332103720562*^9, {3.6583374336085033`*^9, 3.658337439311952*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Random integers", "Section",
 CellChangeTimes->{{3.647716384690867*^9, 3.6477163853144817`*^9}, {
  3.660158414874659*^9, 3.66015841764712*^9}, {3.6601585985671873`*^9, 
  3.660158600454356*^9}}],

Cell[TextData[{
 "We can use the ",
 StyleBox["RandomInteger",
  FontWeight->"Bold"],
 " command to give us a number between 0 and 99 as follows. Every time we \
evaluate the command, we will get a different result"
}], "Text",
 CellChangeTimes->{{3.6601586028939257`*^9, 3.660158663933071*^9}, {
  3.660158927808835*^9, 3.660158934967484*^9}, {3.660160086802525*^9, 
  3.660160092489661*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", "99", "]"}]], "Input",
 CellChangeTimes->{{3.6601586660546713`*^9, 3.660158670885788*^9}, {
  3.660158931463768*^9, 3.6601589381915817`*^9}, {3.660160095417604*^9, 
  3.660160095793796*^9}}],

Cell[BoxData["39"], "Output",
 CellChangeTimes->{
  3.660158671218523*^9, 3.660158939188613*^9, {3.660160096190734*^9, 
   3.660160098691324*^9}}]
}, Open  ]],

Cell["\<\
We can generate a pair of random integers (each between 0 and 99) with the \
following command\
\>", "Text",
 CellChangeTimes->{{3.660160173512291*^9, 3.66016019994427*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"99", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.6601586660546713`*^9, 3.660158670885788*^9}, {
  3.660158931463768*^9, 3.6601589381915817`*^9}, {3.660160095417604*^9, 
  3.660160095793796*^9}, {3.66016016479338*^9, 3.6601602029201097`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"54", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{{3.660160165867702*^9, 3.660160203247365*^9}}]
}, Open  ]],

Cell[TextData[{
 "We can use the ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " command to generate a list of 20 such pairs of numbers as follows"
}], "Text",
 CellChangeTimes->{{3.660158764434696*^9, 3.660158780850711*^9}, {
  3.6601601047534513`*^9, 3.6601601048656473`*^9}, {3.660160211344352*^9, 
  3.660160219095831*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"99", ",", "2"}], "]"}], ",", 
   RowBox[{"{", "20", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660158782752709*^9, 3.6601587903225718`*^9}, 
   3.660158942753049*^9, {3.660160108001424*^9, 3.660160108361639*^9}, {
   3.660160221711917*^9, 3.6601602269675703`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"19", ",", "83"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"40", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "79"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"41", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "63"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"57", ",", "79"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"71", ",", "85"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"48", ",", "58"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"49", ",", "81"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"86", ",", "66"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"61", ",", "91"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"50", ",", "85"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"44", ",", "43"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"98", ",", "96"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"74", ",", "43"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "84"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"73", ",", "14"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.66015879083418*^9, 3.660158943100647*^9, 
  3.660160108784089*^9, 3.660160227799746*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Drawing a starry sky", "Section",
 CellChangeTimes->{{3.647716384690867*^9, 3.6477163853144817`*^9}, {
  3.66021786717548*^9, 3.660217870375041*^9}}],

Cell["\<\
We can use randomness like this to draw a starry sky. First we make a black \
rectangle for space.\
\>", "Text",
 CellChangeTimes->{{3.660160242807239*^9, 3.660160247735578*^9}, {
  3.660160332326844*^9, 3.660160339790224*^9}, {3.6601603825820007`*^9, 
  3.6601603905733747`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sky", "=", 
   RowBox[{"{", 
    RowBox[{"Black", ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "100"}], "}"}]}], "]"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.660160343373332*^9, 3.660160355669958*^9}}],

Cell["\<\
Then we make a function that draws a number of stars. We can tell the \
function how many stars we want to draw.\
\>", "Text",
 CellChangeTimes->{{3.660160395037037*^9, 3.660160421076902*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawStars", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{"LightGray", ",", 
    RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
    RowBox[{"Point", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"RandomInteger", "[", 
        RowBox[{"99", ",", "2"}], "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.660160423059197*^9, 3.660160464149166*^9}}],

Cell["Here is a sky with 15 stars.", "Text",
 CellChangeTimes->{{3.6601604725318613`*^9, 3.66016048398773*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Join", "[", 
   RowBox[{"sky", ",", 
    RowBox[{"drawStars", "[", "15", "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.660160254817072*^9, 3.660160367021977*^9}, 
   3.66016044734966*^9, {3.660160487532812*^9, 3.660160496179964*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], RectangleBox[{0, 0}, {100, 100}]}, 
   {GrayLevel[0.85], PointSize[Medium], 
    PointBox[{{40, 2}, {83, 74}, {50, 39}, {21, 6}, {92, 87}, {8, 4}, {39, 
     6}, {2, 81}, {21, 33}, {10, 59}, {99, 72}, {38, 53}, {36, 32}, {48, 
     89}, {71, 81}}]}}]], "Output",
 CellChangeTimes->{{3.660160316645916*^9, 3.6601603237808723`*^9}, 
   3.6601605049666452`*^9}]
}, Open  ]],

Cell["Here is a sky with 100 stars.", "Text",
 CellChangeTimes->{{3.660160508732101*^9, 3.6601605497471*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Join", "[", 
   RowBox[{"sky", ",", 
    RowBox[{"drawStars", "[", "100", "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.660160254817072*^9, 3.660160367021977*^9}, 
   3.66016044734966*^9, {3.660160487532812*^9, 3.660160496179964*^9}, {
   3.6601605417869473`*^9, 3.660160552699255*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], RectangleBox[{0, 0}, {100, 100}]}, 
   {GrayLevel[0.85], PointSize[Medium], PointBox[CompressedData["
1:eJxNkt9LAkEUhadWpSipTIwsDc2kTGvNEsNS6IeVoaS5kZQZ5nP9/2+di9+D
wsfujHfOPffMZiZ//d9F59xU2DMqOjxt3RV9URaX7K2JFPvL4ks8iJA4Em9i
l5oRequca1Nj517Fsxhy5gqtFREWSfEtWuIMfdM4FOfiCY0a7+/07IkXkRUJ
ak3fp7/5mYg7kRPrYkPE4F4ciIB1j1krYpu9HeYI46khPGr28G4zfs71q/L0
eR+jYzPmxZJIixNy98j9mlxy9Kmj6zNblOxOxQW1Kf4LyGsBT8fMNyazG7GF
1j7+BtTZ2pFdGq8N9m3mCDpt/LfwUuW8z52FWDtms/yaIk5v8z1EL0L/27n7
THCfAf6a7Nsvy7w/4KFvuZWYdYDPOvpF8rCsHsmgxhwF8SE23ezOC9Rn3Owb
+QeC5ijP
     "]]}}]], "Output",
 CellChangeTimes->{{3.660160543443695*^9, 3.660160553213541*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["The RandomChoice command", "Section",
 CellChangeTimes->{{3.647716384690867*^9, 3.6477163853144817`*^9}, {
  3.660217909142717*^9, 3.660217917910451*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["RandomChoice",
  FontWeight->"Bold"],
 " command randomly returns an element from a list. Here is how we choose \
either Black or Yellow randomly, with equal probability of choosing either."
}], "Text",
 CellChangeTimes->{{3.660165195550935*^9, 3.660165205871279*^9}, {
  3.660165238430423*^9, 3.660165247582595*^9}, {3.6601652844703407`*^9, 
  3.6601652965173807`*^9}, {3.660166533004566*^9, 3.660166544395253*^9}, {
  3.660213979565913*^9, 3.6602139800373983`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomChoice", "[", 
  RowBox[{"{", 
   RowBox[{"Black", ",", "Yellow"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.660165171033474*^9, 3.66016518029671*^9}, {
  3.660165253295182*^9, 3.66016527780663*^9}, {3.660213982981037*^9, 
  3.6602139836454687`*^9}}],

Cell[BoxData[
 InterpretationBox[
  ButtonBox[
   TooltipBox[
    GraphicsBox[{
      {GrayLevel[0], RectangleBox[{0, 0}]}, 
      {GrayLevel[0], RectangleBox[{1, -1}]}, 
      {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
     AspectRatio->1,
     Frame->True,
     FrameStyle->GrayLevel[0.],
     FrameTicks->None,
     ImageSize->
      Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
        AbsoluteCurrentValue[Magnification]}],
     PlotRangePadding->None],
    "GrayLevel[0]"],
   Appearance->None,
   BaseStyle->{},
   BaselinePosition->Baseline,
   ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
     If[
      Not[
       AbsoluteCurrentValue["Deployed"]], 
      SelectionMove[Typeset`box$, All, Expression]; 
      FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
      FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
      FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
      MathLink`CallFrontEnd[
        FrontEnd`AttachCell[Typeset`box$, 
         FrontEndResource["GrayLevelColorValueSelector"], {
         0, {Left, Bottom}}, {Left, Top}, 
         "ClosingActions" -> {
          "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
   DefaultBaseStyle->{},
   Evaluator->Automatic,
   Method->"Preemptive"],
  GrayLevel[0],
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.66016518090618*^9, 3.660165184099825*^9}, {
  3.660165255301437*^9, 3.660165280429179*^9}, {3.660213984456568*^9, 
  3.660213990264515*^9}}]
}, Open  ]],

Cell[TextData[{
 "We will actually want Black to be more likely than Yellow, so we ",
 StyleBox["weight",
  FontSlant->"Italic"],
 " the probabilities so that Black occurs 80% of the time."
}], "Text",
 CellChangeTimes->{{3.660166551402528*^9, 3.6601666110099697`*^9}, {
  3.660166716049264*^9, 3.6601667161594353`*^9}, {3.660213994533751*^9, 
  3.660213998681959*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomChoice", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"4", "/", "5"}], ",", 
     RowBox[{"1", "/", "5"}]}], "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"Black", ",", "Yellow"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660165171033474*^9, 3.66016518029671*^9}, {
  3.660165253295182*^9, 3.66016527780663*^9}, {3.66016661824205*^9, 
  3.660166624641501*^9}, {3.660166728847393*^9, 3.660166731343011*^9}, {
  3.6602140018367968`*^9, 3.660214002382597*^9}}],

Cell[BoxData[
 InterpretationBox[
  ButtonBox[
   TooltipBox[
    GraphicsBox[{
      {GrayLevel[0], RectangleBox[{0, 0}]}, 
      {GrayLevel[0], RectangleBox[{1, -1}]}, 
      {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
     AspectRatio->1,
     Frame->True,
     FrameStyle->GrayLevel[0.],
     FrameTicks->None,
     ImageSize->
      Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
        AbsoluteCurrentValue[Magnification]}],
     PlotRangePadding->None],
    "GrayLevel[0]"],
   Appearance->None,
   BaseStyle->{},
   BaselinePosition->Baseline,
   ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
     If[
      Not[
       AbsoluteCurrentValue["Deployed"]], 
      SelectionMove[Typeset`box$, All, Expression]; 
      FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
      FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
      FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
      MathLink`CallFrontEnd[
        FrontEnd`AttachCell[Typeset`box$, 
         FrontEndResource["GrayLevelColorValueSelector"], {
         0, {Left, Bottom}}, {Left, Top}, 
         "ClosingActions" -> {
          "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
   DefaultBaseStyle->{},
   Evaluator->Automatic,
   Method->"Preemptive"],
  GrayLevel[0],
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{3.660166625821596*^9, 3.660166731687468*^9, 
  3.660214005374433*^9, 3.6602146078806*^9}]
}, Open  ]],

Cell["\<\
We can create 100 examples to see that Yellow occurs approximately 20% of the \
time\
\>", "Text",
 CellChangeTimes->{{3.660214635004463*^9, 3.660214650715837*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "/", "5"}], ",", 
       RowBox[{"1", "/", "5"}]}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"Black", ",", "Yellow"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", "100", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660214653003325*^9, 3.660214657915811*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 1, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "RGBColor[1, 1, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 1, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 1, 0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->GrayLevel[0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification]}],
       PlotRangePadding->None],
      "GrayLevel[0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["GrayLevelColorValueSelector"], {
           0, {Left, Bottom}}, {Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    GrayLevel[0],
    Editable->False,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.660214658570662*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Mixing random and non-random elements", "Section",
 CellChangeTimes->{{3.647716384690867*^9, 3.6477163853144817`*^9}, {
  3.660158414874659*^9, 3.66015841764712*^9}, {3.660213849967594*^9, 
  3.660213855911192*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s add a cityscape along the bottom of our picture of a \
starry night. We will do this in stages. First we are going to design a \
repeatable element that is a section of wall with a window. Then we are going \
to stack up a number of these wall sections to create buildings. Finally, we \
will draw a row of buildings to make the city scape. At each stage, we will \
combine both random and non-random elements.\
\>", "Text",
 CellChangeTimes->{{3.660213868222349*^9, 3.660213961197448*^9}}],

Cell[CellGroupData[{

Cell["A section of wall", "Subsection",
 CellChangeTimes->{{3.6602140145410833`*^9, 3.6602140164447327`*^9}}],

Cell[TextData[{
 "To draw a section of wall, we are going to make a grey rectangle, then \
place either a black or yellow smaller rectangle on top of it. (This will be \
the window, which is either dark or lit up). We will provide ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " coordinates so we can draw copies of the wall segment in arbitrary \
locations. The origin for our relative coordinates is the lower left hand \
corner of the wall section."
}], "Text",
 CellChangeTimes->{{3.660214019300281*^9, 3.660214086819984*^9}, {
  3.660214712820166*^9, 3.660214739306572*^9}, {3.66021486459223*^9, 
  3.660214880808708*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawWall", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{"Gray", ",", 
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "+", "5"}], ",", 
        RowBox[{"y", "+", "5"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"RandomChoice", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"4", "/", "5"}], ",", 
        RowBox[{"1", "/", "5"}]}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Black", ",", "Yellow"}], "}"}]}], "]"}], ",", 
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "+", "1"}], ",", 
        RowBox[{"y", "+", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "+", "4"}], ",", 
        RowBox[{"y", "+", "4"}]}], "}"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.660214042119691*^9, 3.660214166050899*^9}, {
   3.660214199546089*^9, 3.660214317106682*^9}, {3.6602145574791307`*^9, 
   3.660214559684816*^9}, 3.660215204318035*^9, {3.660215242572341*^9, 
   3.660215242731986*^9}, {3.660215288187948*^9, 3.660215288386972*^9}, {
   3.660216169090519*^9, 3.660216186391317*^9}, {3.66021623699151*^9, 
   3.660216237349649*^9}}],

Cell["\<\
Here is what our wall section looks like. Each time we re-evaluate the cell, \
it will randomly choose a Black or Yellow window. Black is much more common.\
\>", "Text",
 CellChangeTimes->{{3.660214094419203*^9, 3.660214103507756*^9}, {
  3.660214341984582*^9, 3.660214385511684*^9}, {3.660214679602888*^9, 
  3.6602146942988253`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"drawWall", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6602141681572742`*^9, 3.6602141836500893`*^9}, 
   3.660216843343886*^9}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.5], RectangleBox[{0, 0}, {5, 5}]}, 
   {GrayLevel[0], RectangleBox[{1, 1}, {4, 4}]}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{{3.660214289131571*^9, 3.6602143357642393`*^9}, {
   3.660214562256371*^9, 3.660214586162855*^9}, 3.660215208138584*^9, {
   3.660215245252825*^9, 3.66021526771065*^9}, 3.660215613571521*^9, 
   3.660216190625527*^9, 3.660216239361506*^9, 3.6602168441514597`*^9, 
   3.660218204159584*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A building", "Subsection",
 CellChangeTimes->{{3.660214757378285*^9, 3.660214760010379*^9}}],

Cell[TextData[{
 "To draw a building, we will make a stack of wall sections that is between 2 \
and 8 elements high. We will provide ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " coordinates so we can draw buildings in arbitrary locations. The origin \
for our relative coordinates is the lower left hand corner of the building."
}], "Text",
 CellChangeTimes->{{3.660214763497591*^9, 3.660214855857087*^9}, {
  3.660214890340502*^9, 3.660214896848394*^9}, {3.660215920955209*^9, 
  3.660215923569438*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawBuilding", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"drawWall", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"s", "*", "5"}]}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "0", ",", 
      RowBox[{
       RowBox[{"RandomInteger", "[", "6", "]"}], "+", "1"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6602148253230267`*^9, 3.660214837393112*^9}, {
   3.660214887268366*^9, 3.660214942239966*^9}, {3.6602149914715557`*^9, 
   3.6602150061192083`*^9}, {3.660215143029613*^9, 3.66021516136464*^9}, {
   3.660215275740923*^9, 3.6602152778425913`*^9}, {3.660215465945125*^9, 
   3.660215466416423*^9}, {3.6602159324517307`*^9, 3.660215940945483*^9}, 
   3.66021601689874*^9, {3.660216308230967*^9, 3.660216322909382*^9}}],

Cell["Here is what a random building looks like", "Text",
 CellChangeTimes->{{3.66021501797409*^9, 3.660215023062752*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"drawBuilding", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6602150288873034`*^9, 3.660215045941798*^9}, {
   3.660215079078743*^9, 3.660215099052931*^9}, {3.660215185387738*^9, 
   3.660215188940399*^9}, 3.6602168324159946`*^9}],

Cell[BoxData[
 GraphicsBox[{{
    {GrayLevel[0.5], RectangleBox[{0, 0}, {5, 5}]}, 
    {GrayLevel[0], RectangleBox[{1, 1}, {4, 4}]}}, {
    {GrayLevel[0.5], RectangleBox[{0, 5}, {5, 10}]}, 
    {GrayLevel[0], RectangleBox[{1, 6}, {4, 9}]}}, {
    {GrayLevel[0.5], RectangleBox[{0, 10}, {5, 15}]}, 
    {GrayLevel[0], RectangleBox[{1, 11}, {4, 14}]}}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{{3.6602150407718773`*^9, 3.660215046435093*^9}, {
   3.660215082789007*^9, 3.660215099354004*^9}, {3.660215149587475*^9, 
   3.660215215506402*^9}, {3.660215250372472*^9, 3.660215303561541*^9}, {
   3.660215468971251*^9, 3.66021547365679*^9}, 3.6602159496887503`*^9, 
   3.6602159990538673`*^9, {3.660216069994039*^9, 3.660216079435712*^9}, 
   3.6602161955787*^9, 3.66021624208819*^9, 3.660216326424842*^9, 
   3.6602168332609386`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Table command we used", "Subsection",
 CellChangeTimes->{{3.660215177779744*^9, 3.660215181820464*^9}}],

Cell[TextData[{
 "In the function above, we used a somewhat complicated ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " command. The value ",
 StyleBox["s",
  FontSlant->"Italic"],
 " (for \[OpenCurlyQuote]storeys\[CloseCurlyQuote]) counts up from 0 to some \
upper limit, which is set by ",
 StyleBox["RandomInteger[6] + 1",
  FontWeight->"Bold"],
 ". Since the random part of the expression can range from 0 to 6, the upper \
limit can range from 1 to 7. Since we are counting from 0, if we count ",
 StyleBox["0-1",
  FontSlant->"Italic"],
 " we have two elements, ",
 StyleBox["0-1-2",
  FontSlant->"Italic"],
 ", three elements, and so on, up to ",
 StyleBox["0-1-2-3-4-5-6-7",
  FontSlant->"Italic"],
 ", which is eight elements. Each time we evaluate the function, we get a new \
upper limit, and thus a new ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " command. When we draw the wall sections, we have to multiply ",
 StyleBox["s",
  FontSlant->"Italic"],
 " by 5 because each storey is 5 units high. The ",
 StyleBox["x",
  FontSlant->"Italic"],
 " coordinate, which sets the left edge of each wall section, doesn\
\[CloseCurlyQuote]t change, because we want the wall sections to stack on top \
of one another."
}], "Text",
 CellChangeTimes->{{3.660215320434346*^9, 3.660215593094775*^9}, {
  3.660215958746355*^9, 3.660215986432954*^9}, {3.660216039280521*^9, 
  3.660216048752002*^9}, {3.660216352636956*^9, 3.6602164356271353`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Cityscape", "Subsection",
 CellChangeTimes->{{3.6602156239022303`*^9, 3.6602156267581663`*^9}}],

Cell[TextData[{
 "To generate a cityscape, we need to draw a row of buildings. Each building \
is 5 units wide, and our overall picture is 100 units wide, so we need to \
draw 20 buildings (i.e., 100 / 5). The ",
 StyleBox["x",
  FontSlant->"Italic"],
 " coordinate of each of these buildings has to start at 0 and increase by 5 \
units for each building (so they draw from left to right), but the ",
 StyleBox["y",
  FontSlant->"Italic"],
 " coordinate will always be 0 (so they form a row along the bottom edge of \
the picture)."
}], "Text",
 CellChangeTimes->{{3.660215629653337*^9, 3.6602156366299458`*^9}, {
  3.660215668445006*^9, 3.660215772292118*^9}, {3.660216471147414*^9, 
  3.66021648038627*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawCity", "[", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"drawBuilding", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "95", ",", "5"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.6602157897634277`*^9, 3.6602158837628403`*^9}}],

Cell["Here is a cityscape with the coordinates shown.", "Text",
 CellChangeTimes->{{3.660216862364904*^9, 3.660216874476763*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"drawBuilding", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "95", ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660216878820611*^9, 3.660216887894722*^9}}],

Cell[BoxData[
 GraphicsBox[{{{
     {GrayLevel[0.5], RectangleBox[{0, 0}, {5, 5}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{1, 1}, {4, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{0, 5}, {5, 10}]}, 
     {GrayLevel[0], RectangleBox[{1, 6}, {4, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{0, 10}, {5, 15}]}, 
     {GrayLevel[0], RectangleBox[{1, 11}, {4, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{0, 15}, {5, 20}]}, 
     {GrayLevel[0], RectangleBox[{1, 16}, {4, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{0, 20}, {5, 25}]}, 
     {GrayLevel[0], RectangleBox[{1, 21}, {4, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{5, 0}, {10, 5}]}, 
     {GrayLevel[0], RectangleBox[{6, 1}, {9, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{5, 5}, {10, 10}]}, 
     {GrayLevel[0], RectangleBox[{6, 6}, {9, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{5, 10}, {10, 15}]}, 
     {GrayLevel[0], RectangleBox[{6, 11}, {9, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{5, 15}, {10, 20}]}, 
     {GrayLevel[0], RectangleBox[{6, 16}, {9, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{5, 20}, {10, 25}]}, 
     {GrayLevel[0], RectangleBox[{6, 21}, {9, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{10, 0}, {15, 5}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{11, 1}, {14, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{10, 5}, {15, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{11, 6}, {14, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{10, 10}, {15, 15}]}, 
     {GrayLevel[0], RectangleBox[{11, 11}, {14, 14}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{15, 0}, {20, 5}]}, 
     {GrayLevel[0], RectangleBox[{16, 1}, {19, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 5}, {20, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{16, 6}, {19, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 10}, {20, 15}]}, 
     {GrayLevel[0], RectangleBox[{16, 11}, {19, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 15}, {20, 20}]}, 
     {GrayLevel[0], RectangleBox[{16, 16}, {19, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 20}, {20, 25}]}, 
     {GrayLevel[0], RectangleBox[{16, 21}, {19, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 25}, {20, 30}]}, 
     {GrayLevel[0], RectangleBox[{16, 26}, {19, 29}]}}, {
     {GrayLevel[0.5], RectangleBox[{15, 30}, {20, 35}]}, 
     {GrayLevel[0], RectangleBox[{16, 31}, {19, 34}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{20, 0}, {25, 5}]}, 
     {GrayLevel[0], RectangleBox[{21, 1}, {24, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{20, 5}, {25, 10}]}, 
     {GrayLevel[0], RectangleBox[{21, 6}, {24, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{20, 10}, {25, 15}]}, 
     {GrayLevel[0], RectangleBox[{21, 11}, {24, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{20, 15}, {25, 20}]}, 
     {GrayLevel[0], RectangleBox[{21, 16}, {24, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{20, 20}, {25, 25}]}, 
     {GrayLevel[0], RectangleBox[{21, 21}, {24, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{25, 0}, {30, 5}]}, 
     {GrayLevel[0], RectangleBox[{26, 1}, {29, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{25, 5}, {30, 10}]}, 
     {GrayLevel[0], RectangleBox[{26, 6}, {29, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{25, 10}, {30, 15}]}, 
     {GrayLevel[0], RectangleBox[{26, 11}, {29, 14}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{30, 0}, {35, 5}]}, 
     {GrayLevel[0], RectangleBox[{31, 1}, {34, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{30, 5}, {35, 10}]}, 
     {GrayLevel[0], RectangleBox[{31, 6}, {34, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{30, 10}, {35, 15}]}, 
     {GrayLevel[0], RectangleBox[{31, 11}, {34, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{30, 15}, {35, 20}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{31, 16}, {34, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{30, 20}, {35, 25}]}, 
     {GrayLevel[0], RectangleBox[{31, 21}, {34, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{30, 25}, {35, 30}]}, 
     {GrayLevel[0], RectangleBox[{31, 26}, {34, 29}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{35, 0}, {40, 5}]}, 
     {GrayLevel[0], RectangleBox[{36, 1}, {39, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 5}, {40, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{36, 6}, {39, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 10}, {40, 15}]}, 
     {GrayLevel[0], RectangleBox[{36, 11}, {39, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 15}, {40, 20}]}, 
     {GrayLevel[0], RectangleBox[{36, 16}, {39, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 20}, {40, 25}]}, 
     {GrayLevel[0], RectangleBox[{36, 21}, {39, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 25}, {40, 30}]}, 
     {GrayLevel[0], RectangleBox[{36, 26}, {39, 29}]}}, {
     {GrayLevel[0.5], RectangleBox[{35, 30}, {40, 35}]}, 
     {GrayLevel[0], RectangleBox[{36, 31}, {39, 34}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{40, 0}, {45, 5}]}, 
     {GrayLevel[0], RectangleBox[{41, 1}, {44, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{40, 5}, {45, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{41, 6}, {44, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{40, 10}, {45, 15}]}, 
     {GrayLevel[0], RectangleBox[{41, 11}, {44, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{40, 15}, {45, 20}]}, 
     {GrayLevel[0], RectangleBox[{41, 16}, {44, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{40, 20}, {45, 25}]}, 
     {GrayLevel[0], RectangleBox[{41, 21}, {44, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{40, 25}, {45, 30}]}, 
     {GrayLevel[0], RectangleBox[{41, 26}, {44, 29}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{45, 0}, {50, 5}]}, 
     {GrayLevel[0], RectangleBox[{46, 1}, {49, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{45, 5}, {50, 10}]}, 
     {GrayLevel[0], RectangleBox[{46, 6}, {49, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{45, 10}, {50, 15}]}, 
     {GrayLevel[0], RectangleBox[{46, 11}, {49, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{45, 15}, {50, 20}]}, 
     {GrayLevel[0], RectangleBox[{46, 16}, {49, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{45, 20}, {50, 25}]}, 
     {GrayLevel[0], RectangleBox[{46, 21}, {49, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{50, 0}, {55, 5}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{51, 1}, {54, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 5}, {55, 10}]}, 
     {GrayLevel[0], RectangleBox[{51, 6}, {54, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 10}, {55, 15}]}, 
     {GrayLevel[0], RectangleBox[{51, 11}, {54, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 15}, {55, 20}]}, 
     {GrayLevel[0], RectangleBox[{51, 16}, {54, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 20}, {55, 25}]}, 
     {GrayLevel[0], RectangleBox[{51, 21}, {54, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 25}, {55, 30}]}, 
     {GrayLevel[0], RectangleBox[{51, 26}, {54, 29}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 30}, {55, 35}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{51, 31}, {54, 34}]}}, {
     {GrayLevel[0.5], RectangleBox[{50, 35}, {55, 40}]}, 
     {GrayLevel[0], RectangleBox[{51, 36}, {54, 39}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{55, 0}, {60, 5}]}, 
     {GrayLevel[0], RectangleBox[{56, 1}, {59, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 5}, {60, 10}]}, 
     {GrayLevel[0], RectangleBox[{56, 6}, {59, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 10}, {60, 15}]}, 
     {GrayLevel[0], RectangleBox[{56, 11}, {59, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 15}, {60, 20}]}, 
     {GrayLevel[0], RectangleBox[{56, 16}, {59, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 20}, {60, 25}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{56, 21}, {59, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 25}, {60, 30}]}, 
     {GrayLevel[0], RectangleBox[{56, 26}, {59, 29}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 30}, {60, 35}]}, 
     {GrayLevel[0], RectangleBox[{56, 31}, {59, 34}]}}, {
     {GrayLevel[0.5], RectangleBox[{55, 35}, {60, 40}]}, 
     {GrayLevel[0], RectangleBox[{56, 36}, {59, 39}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{60, 0}, {65, 5}]}, 
     {GrayLevel[0], RectangleBox[{61, 1}, {64, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{60, 5}, {65, 10}]}, 
     {GrayLevel[0], RectangleBox[{61, 6}, {64, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{60, 10}, {65, 15}]}, 
     {GrayLevel[0], RectangleBox[{61, 11}, {64, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{60, 15}, {65, 20}]}, 
     {GrayLevel[0], RectangleBox[{61, 16}, {64, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{60, 20}, {65, 25}]}, 
     {GrayLevel[0], RectangleBox[{61, 21}, {64, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{60, 25}, {65, 30}]}, 
     {GrayLevel[0], RectangleBox[{61, 26}, {64, 29}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{65, 0}, {70, 5}]}, 
     {GrayLevel[0], RectangleBox[{66, 1}, {69, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{65, 5}, {70, 10}]}, 
     {GrayLevel[0], RectangleBox[{66, 6}, {69, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{65, 10}, {70, 15}]}, 
     {GrayLevel[0], RectangleBox[{66, 11}, {69, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{65, 15}, {70, 20}]}, 
     {GrayLevel[0], RectangleBox[{66, 16}, {69, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{65, 20}, {70, 25}]}, 
     {GrayLevel[0], RectangleBox[{66, 21}, {69, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{70, 0}, {75, 5}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{71, 1}, {74, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{70, 5}, {75, 10}]}, 
     {GrayLevel[0], RectangleBox[{71, 6}, {74, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{70, 10}, {75, 15}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{71, 11}, {74, 14}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{75, 0}, {80, 5}]}, 
     {GrayLevel[0], RectangleBox[{76, 1}, {79, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{75, 5}, {80, 10}]}, 
     {GrayLevel[0], RectangleBox[{76, 6}, {79, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{75, 10}, {80, 15}]}, 
     {GrayLevel[0], RectangleBox[{76, 11}, {79, 14}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{80, 0}, {85, 5}]}, 
     {GrayLevel[0], RectangleBox[{81, 1}, {84, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{80, 5}, {85, 10}]}, 
     {GrayLevel[0], RectangleBox[{81, 6}, {84, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{80, 10}, {85, 15}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{81, 11}, {84, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{80, 15}, {85, 20}]}, 
     {GrayLevel[0], RectangleBox[{81, 16}, {84, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{80, 20}, {85, 25}]}, 
     {GrayLevel[0], RectangleBox[{81, 21}, {84, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{80, 25}, {85, 30}]}, 
     {GrayLevel[0], RectangleBox[{81, 26}, {84, 29}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{85, 0}, {90, 5}]}, 
     {GrayLevel[0], RectangleBox[{86, 1}, {89, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{85, 5}, {90, 10}]}, 
     {GrayLevel[0], RectangleBox[{86, 6}, {89, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{85, 10}, {90, 15}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{86, 11}, {89, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{85, 15}, {90, 20}]}, 
     {GrayLevel[0], RectangleBox[{86, 16}, {89, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{85, 20}, {90, 25}]}, 
     {GrayLevel[0], RectangleBox[{86, 21}, {89, 24}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{90, 0}, {95, 5}]}, 
     {GrayLevel[0], RectangleBox[{91, 1}, {94, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 5}, {95, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{91, 6}, {94, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 10}, {95, 15}]}, 
     {GrayLevel[0], RectangleBox[{91, 11}, {94, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 15}, {95, 20}]}, 
     {GrayLevel[0], RectangleBox[{91, 16}, {94, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 20}, {95, 25}]}, 
     {GrayLevel[0], RectangleBox[{91, 21}, {94, 24}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 25}, {95, 30}]}, 
     {GrayLevel[0], RectangleBox[{91, 26}, {94, 29}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 30}, {95, 35}]}, 
     {GrayLevel[0], RectangleBox[{91, 31}, {94, 34}]}}, {
     {GrayLevel[0.5], RectangleBox[{90, 35}, {95, 40}]}, 
     {GrayLevel[0], RectangleBox[{91, 36}, {94, 39}]}}}, {{
     {GrayLevel[0.5], RectangleBox[{95, 0}, {100, 5}]}, 
     {GrayLevel[0], RectangleBox[{96, 1}, {99, 4}]}}, {
     {GrayLevel[0.5], RectangleBox[{95, 5}, {100, 10}]}, 
     {RGBColor[1, 1, 0], RectangleBox[{96, 6}, {99, 9}]}}, {
     {GrayLevel[0.5], RectangleBox[{95, 10}, {100, 15}]}, 
     {GrayLevel[0], RectangleBox[{96, 11}, {99, 14}]}}, {
     {GrayLevel[0.5], RectangleBox[{95, 15}, {100, 20}]}, 
     {GrayLevel[0], RectangleBox[{96, 16}, {99, 19}]}}, {
     {GrayLevel[0.5], RectangleBox[{95, 20}, {100, 25}]}, 
     {GrayLevel[0], RectangleBox[{96, 21}, {99, 24}]}}}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{3.660216889535733*^9}]
}, Open  ]],

Cell["Here is our image with the cityscape included.", "Text",
 CellChangeTimes->{{3.6602157762992764`*^9, 3.660215787563697*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Join", "[", 
   RowBox[{"sky", ",", 
    RowBox[{"drawStars", "[", "100", "]"}], ",", 
    RowBox[{"drawCity", "[", "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.660160254817072*^9, 3.660160367021977*^9}, 
   3.66016044734966*^9, {3.660160487532812*^9, 3.660160496179964*^9}, {
   3.6601605417869473`*^9, 3.660160552699255*^9}, {3.660215656021942*^9, 
   3.660215661949696*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], RectangleBox[{0, 0}, {100, 100}]}, 
   {GrayLevel[0.85], PointSize[Medium], PointBox[CompressedData["
1:eJwtkUdPQkEURhErCSwUoogtiKjIBlHsiKhgAUssIDYMutb/v/NMchYn82be
Ld93b3bw9/AbjUQiPxDOF9iCATRgHO4hDi3IwQbE4BI2PVvmFGAEJqEJR3AD
fWs/QxFOoA4X0IVbeyVgChYgbd8r+LDvE+S9zxgTKNkn9D73exWq6tuGlDVC
7i7sQQ0q8Gr8p9qvYQhmIWPNadiBOxhV57w+EtZb0l/OPnE9B43Hzq2g1zf1
NJ1xEiZ866o7qYdhe2esc+gMk9bpqz3UbrvDjnENNZ3Cvm9FdWc9q74l/d9z
phU9BI1lWHEOaXc7q++8+1hWQ9jnl7XnYB3enUlaHTXvPX3V9R70RtWUMq6t
x5i7+zb3wPiyORn7BO+LxnecXcn6j3osm5tRU0OtYb9jeltzbsHTGfwDho8q
oQ==
     "]], {{
      {GrayLevel[0.5], RectangleBox[{0, 0}, {5, 5}]}, 
      {GrayLevel[0], RectangleBox[{1, 1}, {4, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{0, 5}, {5, 10}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{1, 6}, {4, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{0, 10}, {5, 15}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{1, 11}, {4, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{0, 15}, {5, 20}]}, 
      {GrayLevel[0], RectangleBox[{1, 16}, {4, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{0, 20}, {5, 25}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{1, 21}, {4, 24}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{5, 0}, {10, 5}]}, 
      {GrayLevel[0], RectangleBox[{6, 1}, {9, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 5}, {10, 10}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{6, 6}, {9, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 10}, {10, 15}]}, 
      {GrayLevel[0], RectangleBox[{6, 11}, {9, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 15}, {10, 20}]}, 
      {GrayLevel[0], RectangleBox[{6, 16}, {9, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 20}, {10, 25}]}, 
      {GrayLevel[0], RectangleBox[{6, 21}, {9, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 25}, {10, 30}]}, 
      {GrayLevel[0], RectangleBox[{6, 26}, {9, 29}]}}, {
      {GrayLevel[0.5], RectangleBox[{5, 30}, {10, 35}]}, 
      {GrayLevel[0], RectangleBox[{6, 31}, {9, 34}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{10, 0}, {15, 5}]}, 
      {GrayLevel[0], RectangleBox[{11, 1}, {14, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{10, 5}, {15, 10}]}, 
      {GrayLevel[0], RectangleBox[{11, 6}, {14, 9}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{15, 0}, {20, 5}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{16, 1}, {19, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{15, 5}, {20, 10}]}, 
      {GrayLevel[0], RectangleBox[{16, 6}, {19, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{15, 10}, {20, 15}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{16, 11}, {19, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{15, 15}, {20, 20}]}, 
      {GrayLevel[0], RectangleBox[{16, 16}, {19, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{15, 20}, {20, 25}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{16, 21}, {19, 24}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{20, 0}, {25, 5}]}, 
      {GrayLevel[0], RectangleBox[{21, 1}, {24, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{20, 5}, {25, 10}]}, 
      {GrayLevel[0], RectangleBox[{21, 6}, {24, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{20, 10}, {25, 15}]}, 
      {GrayLevel[0], RectangleBox[{21, 11}, {24, 14}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{25, 0}, {30, 5}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{26, 1}, {29, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{25, 5}, {30, 10}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{26, 6}, {29, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{25, 10}, {30, 15}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{26, 11}, {29, 14}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{30, 0}, {35, 5}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{31, 1}, {34, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{30, 5}, {35, 10}]}, 
      {GrayLevel[0], RectangleBox[{31, 6}, {34, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{30, 10}, {35, 15}]}, 
      {GrayLevel[0], RectangleBox[{31, 11}, {34, 14}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{35, 0}, {40, 5}]}, 
      {GrayLevel[0], RectangleBox[{36, 1}, {39, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{35, 5}, {40, 10}]}, 
      {GrayLevel[0], RectangleBox[{36, 6}, {39, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{35, 10}, {40, 15}]}, 
      {GrayLevel[0], RectangleBox[{36, 11}, {39, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{35, 15}, {40, 20}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{36, 16}, {39, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{35, 20}, {40, 25}]}, 
      {GrayLevel[0], RectangleBox[{36, 21}, {39, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{35, 25}, {40, 30}]}, 
      {GrayLevel[0], RectangleBox[{36, 26}, {39, 29}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{40, 0}, {45, 5}]}, 
      {GrayLevel[0], RectangleBox[{41, 1}, {44, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{40, 5}, {45, 10}]}, 
      {GrayLevel[0], RectangleBox[{41, 6}, {44, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{40, 10}, {45, 15}]}, 
      {GrayLevel[0], RectangleBox[{41, 11}, {44, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{40, 15}, {45, 20}]}, 
      {GrayLevel[0], RectangleBox[{41, 16}, {44, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{40, 20}, {45, 25}]}, 
      {GrayLevel[0], RectangleBox[{41, 21}, {44, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{40, 25}, {45, 30}]}, 
      {GrayLevel[0], RectangleBox[{41, 26}, {44, 29}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{45, 0}, {50, 5}]}, 
      {GrayLevel[0], RectangleBox[{46, 1}, {49, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{45, 5}, {50, 10}]}, 
      {GrayLevel[0], RectangleBox[{46, 6}, {49, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{45, 10}, {50, 15}]}, 
      {GrayLevel[0], RectangleBox[{46, 11}, {49, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{45, 15}, {50, 20}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{46, 16}, {49, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{45, 20}, {50, 25}]}, 
      {GrayLevel[0], RectangleBox[{46, 21}, {49, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{45, 25}, {50, 30}]}, 
      {GrayLevel[0], RectangleBox[{46, 26}, {49, 29}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{50, 0}, {55, 5}]}, 
      {GrayLevel[0], RectangleBox[{51, 1}, {54, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{50, 5}, {55, 10}]}, 
      {GrayLevel[0], RectangleBox[{51, 6}, {54, 9}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{55, 0}, {60, 5}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{56, 1}, {59, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{55, 5}, {60, 10}]}, 
      {GrayLevel[0], RectangleBox[{56, 6}, {59, 9}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{60, 0}, {65, 5}]}, 
      {GrayLevel[0], RectangleBox[{61, 1}, {64, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{60, 5}, {65, 10}]}, 
      {GrayLevel[0], RectangleBox[{61, 6}, {64, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{60, 10}, {65, 15}]}, 
      {GrayLevel[0], RectangleBox[{61, 11}, {64, 14}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{65, 0}, {70, 5}]}, 
      {GrayLevel[0], RectangleBox[{66, 1}, {69, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 5}, {70, 10}]}, 
      {GrayLevel[0], RectangleBox[{66, 6}, {69, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 10}, {70, 15}]}, 
      {GrayLevel[0], RectangleBox[{66, 11}, {69, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 15}, {70, 20}]}, 
      {GrayLevel[0], RectangleBox[{66, 16}, {69, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 20}, {70, 25}]}, 
      {GrayLevel[0], RectangleBox[{66, 21}, {69, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 25}, {70, 30}]}, 
      {GrayLevel[0], RectangleBox[{66, 26}, {69, 29}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 30}, {70, 35}]}, 
      {GrayLevel[0], RectangleBox[{66, 31}, {69, 34}]}}, {
      {GrayLevel[0.5], RectangleBox[{65, 35}, {70, 40}]}, 
      {GrayLevel[0], RectangleBox[{66, 36}, {69, 39}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{70, 0}, {75, 5}]}, 
      {GrayLevel[0], RectangleBox[{71, 1}, {74, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{70, 5}, {75, 10}]}, 
      {GrayLevel[0], RectangleBox[{71, 6}, {74, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{70, 10}, {75, 15}]}, 
      {GrayLevel[0], RectangleBox[{71, 11}, {74, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{70, 15}, {75, 20}]}, 
      {GrayLevel[0], RectangleBox[{71, 16}, {74, 19}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{75, 0}, {80, 5}]}, 
      {GrayLevel[0], RectangleBox[{76, 1}, {79, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{75, 5}, {80, 10}]}, 
      {GrayLevel[0], RectangleBox[{76, 6}, {79, 9}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{80, 0}, {85, 5}]}, 
      {GrayLevel[0], RectangleBox[{81, 1}, {84, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{80, 5}, {85, 10}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{81, 6}, {84, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{80, 10}, {85, 15}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{81, 11}, {84, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{80, 15}, {85, 20}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{81, 16}, {84, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{80, 20}, {85, 25}]}, 
      {GrayLevel[0], RectangleBox[{81, 21}, {84, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{80, 25}, {85, 30}]}, 
      {GrayLevel[0], RectangleBox[{81, 26}, {84, 29}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{85, 0}, {90, 5}]}, 
      {GrayLevel[0], RectangleBox[{86, 1}, {89, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{85, 5}, {90, 10}]}, 
      {GrayLevel[0], RectangleBox[{86, 6}, {89, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{85, 10}, {90, 15}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{86, 11}, {89, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{85, 15}, {90, 20}]}, 
      {GrayLevel[0], RectangleBox[{86, 16}, {89, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{85, 20}, {90, 25}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{86, 21}, {89, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{85, 25}, {90, 30}]}, 
      {GrayLevel[0], RectangleBox[{86, 26}, {89, 29}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{90, 0}, {95, 5}]}, 
      {GrayLevel[0], RectangleBox[{91, 1}, {94, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 5}, {95, 10}]}, 
      {GrayLevel[0], RectangleBox[{91, 6}, {94, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 10}, {95, 15}]}, 
      {GrayLevel[0], RectangleBox[{91, 11}, {94, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 15}, {95, 20}]}, 
      {GrayLevel[0], RectangleBox[{91, 16}, {94, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 20}, {95, 25}]}, 
      {GrayLevel[0], RectangleBox[{91, 21}, {94, 24}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 25}, {95, 30}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{91, 26}, {94, 29}]}}, {
      {GrayLevel[0.5], RectangleBox[{90, 30}, {95, 35}]}, 
      {RGBColor[1, 1, 0], RectangleBox[{91, 31}, {94, 34}]}}}, {{
      {GrayLevel[0.5], RectangleBox[{95, 0}, {100, 5}]}, 
      {GrayLevel[0], RectangleBox[{96, 1}, {99, 4}]}}, {
      {GrayLevel[0.5], RectangleBox[{95, 5}, {100, 10}]}, 
      {GrayLevel[0], RectangleBox[{96, 6}, {99, 9}]}}, {
      {GrayLevel[0.5], RectangleBox[{95, 10}, {100, 15}]}, 
      {GrayLevel[0], RectangleBox[{96, 11}, {99, 14}]}}, {
      {GrayLevel[0.5], RectangleBox[{95, 15}, {100, 20}]}, 
      {GrayLevel[0], RectangleBox[{96, 16}, {99, 19}]}}, {
      {GrayLevel[0.5], RectangleBox[{95, 20}, {100, 25}]}, 
      {GrayLevel[0], RectangleBox[{96, 21}, {99, 24}]}}}}}]], "Output",
 CellChangeTimes->{{3.660215847745839*^9, 3.660215886369505*^9}, 
   3.660216085642136*^9, 3.660216203921496*^9, 3.660216245692198*^9, {
   3.660216281168674*^9, 3.6602162876920958`*^9}, 3.660216332885394*^9}]
}, Open  ]],

Cell[TextData[{
 "Why did we count from 0 to 95 in the ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " command above, rather than 0 to 100?"
}], "Text",
 CellChangeTimes->{{3.6602164911620293`*^9, 3.660216513258005*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Drawing a moon", "Section",
 CellChangeTimes->{{3.647716384690867*^9, 3.6477163853144817`*^9}, {
  3.660160624691779*^9, 3.660160627138022*^9}, {3.660218072645153*^9, 
  3.660218074444139*^9}}],

Cell["\<\
We can use random integers to specify the centre coordinates or radius of a \
circle, or both.\
\>", "Text",
 CellChangeTimes->{{3.660160631562378*^9, 3.660160671913302*^9}}],

Cell[CellGroupData[{

Cell["The background disk", "Subsection",
 CellChangeTimes->{{3.660218299024919*^9, 3.660218302024892*^9}}],

Cell[TextData[{
 "Suppose we want to draw a moon. We can start with a white ",
 StyleBox["Disk",
  FontWeight->"Bold"],
 " of radius 20. We want to draw the moon after we draw our stars, so it \
appears in front of them. Let\[CloseCurlyQuote]s try centring it at {30, 70} \
to see how it looks."
}], "Text",
 CellChangeTimes->{{3.660160676888834*^9, 3.660160686696937*^9}, {
   3.660160732568084*^9, 3.660160786503483*^9}, {3.6601608631191463`*^9, 
   3.660160881390141*^9}, {3.660160932892948*^9, 3.6601609962521677`*^9}, 
   3.6601630187838507`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Join", "[", 
   RowBox[{"sky", ",", 
    RowBox[{"drawStars", "[", "40", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"White", ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"30", ",", "70"}], "}"}], ",", "20"}], "]"}]}], "}"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.660160692775386*^9, 3.6601607489280853`*^9}, {
  3.6601607951353207`*^9, 3.66016085897615*^9}, {3.660163008016713*^9, 
  3.6601630132798843`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], RectangleBox[{0, 0}, {100, 100}]}, 
   {GrayLevel[0.85], PointSize[Medium], PointBox[CompressedData["
1:eJwtz00LQUEUxvFBshBKWFm4VyFuXSy8liSveVlcN5ew8QH4/jv/U8/Ur+nM
mTnnjPf5Rd+0c64D2xeY4aXYVgsJDogQah+jrviKHZqo6cxq9rFV7owsUuqz
xwpTVHHR+yPeGKrGEzn4ylfQwxqe7pYxUm9ffSa4I4NYOZu5gDZu6t2VuWaw
vz8QYKk5Gygij5NqWX6DAUqq8QeNHRFz
     "]], 
    {GrayLevel[1], DiskBox[{30, 70}, 20]}}}]], "Output",
 CellChangeTimes->{{3.66016079774209*^9, 3.660160859334066*^9}, {
   3.660163008573422*^9, 3.660163021700583*^9}, 3.6601630817233562`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relative coordinates", "Subsection",
 CellChangeTimes->{{3.660218312960828*^9, 3.660218316673113*^9}}],

Cell["\<\
Now we want to make a moon-drawing function that uses relative coordinates. \
This is what we have so far:\
\>", "Text",
 CellChangeTimes->{{3.6601608949661903`*^9, 3.6601608982538233`*^9}, {
  3.6601609795644083`*^9, 3.660161019275792*^9}, {3.660161050651167*^9, 
  3.660161050907446*^9}}],

Cell["\<\
drawMoon[{x_, y_}] :=
 {White, Disk[{x, y}, 20]}\
\>", "Program",
 CellChangeTimes->{{3.66016102254772*^9, 3.660161045995759*^9}, 
   3.660161183705428*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Craters: radius", "Subsection",
 CellChangeTimes->{{3.660218342071885*^9, 3.660218361592523*^9}}],

Cell["\<\
To add craters, we are going to draw some smaller, randomly-placed light grey \
circles on top of the moon. We use both random centre position and random \
radius for each crater.\
\>", "Text",
 CellChangeTimes->{{3.660161092210733*^9, 3.660161166297968*^9}, 
   3.6601612104898367`*^9, {3.6601615404921827`*^9, 3.660161541748549*^9}, {
   3.6601616043241568`*^9, 3.660161618819021*^9}}],

Cell[TextData[{
 "We want our craters to be small, so we set the radius of each to a random \
integer between 1 and 4. Recall that ",
 StyleBox["RandomInteger[3]",
  FontWeight->"Bold"],
 " returns a value between 0 and 3. To get a value between 1 and 4, we have \
to add one to the output, like this:"
}], "Text",
 CellChangeTimes->{{3.660161721449912*^9, 3.6601618141045523`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", "3", "]"}], "+", "1"}]], "Input"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.660161821478348*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Craters: centre coordinates", "Subsection",
 CellChangeTimes->{{3.660218364919475*^9, 3.660218371096168*^9}}],

Cell["\<\
The centre coordinates for the craters are more tricky. The centre of the \
moon is {0, 0} and the radius is 20. That means that our moon sits inside a \
rectangle with relative coordinates {-20, -20} to {20, 20}. We can try \
drawing the moon and the rectangle surrounding it to see this:\
\>", "Text",
 CellChangeTimes->{{3.660161848688209*^9, 3.660161958614355*^9}, 
   3.660162290434217*^9, {3.660162532662572*^9, 3.660162533070086*^9}, {
   3.660162770034984*^9, 3.66016285813725*^9}, {3.660216668490572*^9, 
   3.6602166944307013`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"LightBlue", ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "20"}], ",", 
         RowBox[{"-", "20"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "20"}], "}"}]}], "]"}], ",", "LightGray", ",", 
     RowBox[{"Disk", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "20"}], "]"}]}], "}"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660216695509365*^9, 3.6602168076859493`*^9}, {
  3.660216914317903*^9, 3.6602169184580812`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.87, 0.94, 1], RectangleBox[{-20, -20}, {20, 20}]}, 
   {GrayLevel[0.85], DiskBox[{0, 0}, 20]}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{{3.660216733219821*^9, 3.660216808042816*^9}, 
   3.660216918994546*^9}]
}, Open  ]],

Cell["\<\
We can generate coordinates in the range -20 to 20 with a command like\
\>", "Text",
 CellChangeTimes->{{3.660161848688209*^9, 3.660161958614355*^9}, 
   3.660162290434217*^9, {3.660162532662572*^9, 3.660162533070086*^9}, {
   3.660162770034984*^9, 3.66016285813725*^9}, 3.660216668490572*^9, {
   3.660216962411983*^9, 3.6602169636594877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"RandomInteger", "[", "40", "]"}], "-", "20"}], ",", 
   RowBox[{
    RowBox[{"RandomInteger", "[", "40", "]"}], "-", "20"}]}], "}"}]], "Input",\

 CellChangeTimes->{{3.660161969118793*^9, 3.660161979917808*^9}, {
  3.66021696891577*^9, 3.660216972499642*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "14"}]}], "}"}]], "Output",
 CellChangeTimes->{3.66016198042804*^9, 3.660216973357774*^9}]
}, Open  ]],

Cell["\<\
But if we put craters in those locations, some of them will fall inside the \
rectangle, but outside the circumference of the moon. We can see this by \
plotting 100 random points over the top of our moon / rectangle image.\
\>", "Text",
 CellChangeTimes->{{3.660161986429432*^9, 3.660162052828986*^9}, {
  3.6601621623166428`*^9, 3.660162168211372*^9}, {3.660162863080716*^9, 
  3.660162961271694*^9}, {3.6602169823253202`*^9, 3.660216997258898*^9}, {
  3.660217051578557*^9, 3.6602170765460167`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"LightBlue", ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "20"}], ",", 
         RowBox[{"-", "20"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "20"}], "}"}]}], "]"}], ",", "LightGray", ",", 
     RowBox[{"Disk", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "20"}], "]"}], ",", 
     RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Blue", ",", 
     RowBox[{"Point", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomInteger", "[", "40", "]"}], "-", "20"}], ",", 
          RowBox[{
           RowBox[{"RandomInteger", "[", "40", "]"}], "-", "20"}]}], "}"}], 
        ",", 
        RowBox[{"{", "100", "}"}]}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660216695509365*^9, 3.6602168076859493`*^9}, {
  3.660216914317903*^9, 3.6602169184580812`*^9}, {3.660217007899473*^9, 
  3.6602170451707287`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.87, 0.94, 1], RectangleBox[{-20, -20}, {20, 20}]}, 
   {GrayLevel[0.85], DiskBox[{0, 0}, 20]}, 
   {RGBColor[0, 0, 1], PointSize[Medium], PointBox[CompressedData["
1:eJxNkmtuwkAQg1MCBUISoHCBXqlHqPq7vXjIiyg0QEpt8a2UlazZp+2ZnffP
n4/vWRRFX4LjQ+NVMRbOmm8V74qet0I3OV8IuVBrrxEyzW+P5/D5XpgLo9aF
sNbc8SKk7L9Fz+F1y50TegWc5jqgZY9/2u+Fijul4DfmSdC8cea4J4cV0Trm
uTI/gwR/5lnhf4t28Hjkneuw4byH2z7taalYoh9y6Cf1MW9Drhla5qypy4H1
iJfAWVBbe7hQR9974d8qfM3hr8ippF4x76y5Q8e1HMi/4V6K/pGau2Y7/meY
9ESLh4weiPnThDw7OEe8DETnH3qhm+jWk/+o0Y/4z4p7FXo5/Rf+OeXuAu5Q
iw2+c3K+w3GiN37phRl916DvdwNeM87t4x/OJbdS
     "]]}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{3.6602170464082613`*^9}]
}, Open  ]],

Cell["\<\
We could get a nice solution to our problem using trigonometry, but for now \
we will just force the centre coordinates of each crater to be within the \
range of -11 to 11 with a command like\
\>", "Text",
 CellChangeTimes->{{3.660161986429432*^9, 3.660162052828986*^9}, {
   3.6601621623166428`*^9, 3.660162168211372*^9}, {3.660162863080716*^9, 
   3.660162961271694*^9}, 3.6602169823253202`*^9, {3.6602170899770823`*^9, 
   3.660217091713707*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}], ",", 
   RowBox[{
    RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}]}], "}"}]], "Input",\

 CellChangeTimes->{{3.660161969118793*^9, 3.660161979917808*^9}, {
   3.6601620629254913`*^9, 3.660162066556486*^9}, 3.6601629526983852`*^9, {
   3.660217101409792*^9, 3.660217109937643*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.6601629539573717`*^9, 3.66021711036386*^9}]
}, Open  ]],

Cell["\<\
Here are 100 such random coordinate pairs plotted over the moon / rectangle \
image. Notice that they fall inside a rectangle which has relative \
coordinates {-11, -11} to {11, 11}.\
\>", "Text",
 CellChangeTimes->{{3.6602171132172327`*^9, 3.6602171424570913`*^9}, {
  3.660217188216549*^9, 3.660217197247991*^9}, {3.660217280479401*^9, 
  3.66021731803855*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"LightBlue", ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "20"}], ",", 
         RowBox[{"-", "20"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "20"}], "}"}]}], "]"}], ",", "LightGray", ",", 
     RowBox[{"Disk", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "20"}], "]"}], ",", 
     "LightYellow", ",", " ", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "11"}], ",", 
         RowBox[{"-", "11"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "11"}], "}"}]}], "]"}], ",", 
     RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Blue", ",", 
     RowBox[{"Point", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}], ",", 
          RowBox[{
           RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}]}], "}"}], 
        ",", 
        RowBox[{"{", "100", "}"}]}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.660216695509365*^9, 3.6602168076859493`*^9}, {
  3.660216914317903*^9, 3.6602169184580812`*^9}, {3.660217007899473*^9, 
  3.6602170451707287`*^9}, {3.660217154809538*^9, 3.6602171630248823`*^9}, {
  3.660217221127769*^9, 3.660217273117601*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.87, 0.94, 1], RectangleBox[{-20, -20}, {20, 20}]}, 
   {GrayLevel[0.85], DiskBox[{0, 0}, 20]}, 
   {RGBColor[1, 1, 0.85], RectangleBox[{-11, -11}, {11, 11}]}, 
   {RGBColor[0, 0, 1], PointSize[Medium], PointBox[CompressedData["
1:eJxNklESgjAMRItFoHAKr+QRHL/19IBiCyb6dqbMdBLS7Cab5nJ7Xh+nEMLd
jtv3cRyLndb81Wxndjc7429mJ7N+fya/NzuDKWbFEeD0vMHOC54e33ny8f92
8v0b7RD+8RT8AJf/R3pxfEOv6n8F53cJTmmSDtV909OZujt42RmOQo7X/XC/
cT/R70qshUf6TsxroL7njfBIVwHbMZsPPJl8xfRl+vEaibk4tkdvolZE11Dd
C7NQMxArvE1Hb6nqpQfzwte7am6RGpmaGY0L/UYwrqkBMxGLxAuau2pWc/Wu
0qvdGjl688AeaGbK1y7L1+7ojbZq1zL62mqGCbzzfwHilIT9
     "]]}},
  Frame->True,
  GridLines->Automatic]], "Output",
 CellChangeTimes->{
  3.660217165091426*^9, {3.6602172551834393`*^9, 3.660217273798139*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Drawing the moon", "Subsection",
 CellChangeTimes->{{3.6602183817881002`*^9, 3.660218384588141*^9}}],

Cell["\<\
Given that, here is our moon-drawing function. It draws 8 craters.\
\>", "Text",
 CellChangeTimes->{{3.660162069012393*^9, 3.660162094268392*^9}, {
  3.660217326413801*^9, 3.660217328158636*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawMoon", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{"White", ",", 
    RowBox[{"Disk", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", "20"}], "]"}], ",", "LightGray", 
    ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Circle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "+", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}], ")"}]}], 
          ",", 
          RowBox[{"y", "+", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"RandomInteger", "[", "22", "]"}], "-", "11"}], 
            ")"}]}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"RandomInteger", "[", "3", "]"}], "+", "1"}]}], "]"}], ",", 
      RowBox[{"{", "8", "}"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.66016102254772*^9, 3.660161045995759*^9}, {
   3.660161189762294*^9, 3.6601612291931887`*^9}, {3.660161285568071*^9, 
   3.660161529229352*^9}, {3.6601615630687017`*^9, 3.660161586958626*^9}, {
   3.66016162864402*^9, 3.660161656068417*^9}, {3.660162077789254*^9, 
   3.660162086004611*^9}, {3.6601621955876102`*^9, 3.660162195819478*^9}, 
   3.6601622726519938`*^9, {3.660162540182714*^9, 3.660162730245007*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["The final picture", "Subsection",
 CellChangeTimes->{{3.660218389163445*^9, 3.660218391979928*^9}}],

Cell["\<\
Here is our final version, with the stars, moon and the cityscape:\
\>", "Text",
 CellChangeTimes->{{3.6601612390493526`*^9, 3.660161276144288*^9}, {
   3.6602165544334383`*^9, 3.6602165595531178`*^9}, 3.660217336711241*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Join", "[", 
   RowBox[{"sky", ",", 
    RowBox[{"drawStars", "[", "40", "]"}], ",", 
    RowBox[{"drawMoon", "[", 
     RowBox[{"{", 
      RowBox[{"30", ",", "70"}], "}"}], "]"}], ",", 
    RowBox[{"drawCity", "[", "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.660160692775386*^9, 3.6601607489280853`*^9}, {
   3.6601607951353207`*^9, 3.66016085897615*^9}, {3.660161253264558*^9, 
   3.660161268688381*^9}, 3.6601630321355667`*^9, 3.660216549868072*^9}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], RectangleBox[{0, 0}, {100, 100}]}, 
   {GrayLevel[0.85], PointSize[Medium], PointBox[CompressedData["
1:eJwtz10LAUEUxvFZWtFmJXYjSZvX8rLrRhtXlC2xSHIhF9oPwPe/8988U79m
aubMeU6QfW+fgjFmgnzfoo2u+a89qlhhjAwD1HSuo4UK+hjhggAlLPBCEZHe
neBhhic26r/DFR3VOpiijBQHrPV3rHyx7pfoIVGmoXKfNY+vvone3tHEQzks
vBFqZls9HfVLVWeprgEXc2XNMx/xA8mbDvo=
     "]], 
    {GrayLevel[1], DiskBox[{30, 70}, 20]}, 
    {GrayLevel[
     0.85], {CircleBox[{39, 68}], CircleBox[{19, 81}, 4], 
      CircleBox[{25, 79}, 2], CircleBox[{33, 76}, 3], CircleBox[{40, 60}, 4], 
      CircleBox[{37, 60}], CircleBox[{28, 65}, 3], 
      CircleBox[{27, 73}, 4]}, {{
       {GrayLevel[0.5], RectangleBox[{0, 0}, {5, 5}]}, 
       {GrayLevel[0], RectangleBox[{1, 1}, {4, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 5}, {5, 10}]}, 
       {GrayLevel[0], RectangleBox[{1, 6}, {4, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 10}, {5, 15}]}, 
       {GrayLevel[0], RectangleBox[{1, 11}, {4, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 15}, {5, 20}]}, 
       {GrayLevel[0], RectangleBox[{1, 16}, {4, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 20}, {5, 25}]}, 
       {GrayLevel[0], RectangleBox[{1, 21}, {4, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 25}, {5, 30}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{1, 26}, {4, 29}]}}, {
       {GrayLevel[0.5], RectangleBox[{0, 30}, {5, 35}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{1, 31}, {4, 34}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{5, 0}, {10, 5}]}, 
       {GrayLevel[0], RectangleBox[{6, 1}, {9, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{5, 5}, {10, 10}]}, 
       {GrayLevel[0], RectangleBox[{6, 6}, {9, 9}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{10, 0}, {15, 5}]}, 
       {GrayLevel[0], RectangleBox[{11, 1}, {14, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 5}, {15, 10}]}, 
       {GrayLevel[0], RectangleBox[{11, 6}, {14, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 10}, {15, 15}]}, 
       {GrayLevel[0], RectangleBox[{11, 11}, {14, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 15}, {15, 20}]}, 
       {GrayLevel[0], RectangleBox[{11, 16}, {14, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 20}, {15, 25}]}, 
       {GrayLevel[0], RectangleBox[{11, 21}, {14, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 25}, {15, 30}]}, 
       {GrayLevel[0], RectangleBox[{11, 26}, {14, 29}]}}, {
       {GrayLevel[0.5], RectangleBox[{10, 30}, {15, 35}]}, 
       {GrayLevel[0], RectangleBox[{11, 31}, {14, 34}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{15, 0}, {20, 5}]}, 
       {GrayLevel[0], RectangleBox[{16, 1}, {19, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{15, 5}, {20, 10}]}, 
       {GrayLevel[0], RectangleBox[{16, 6}, {19, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{15, 10}, {20, 15}]}, 
       {GrayLevel[0], RectangleBox[{16, 11}, {19, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{15, 15}, {20, 20}]}, 
       {GrayLevel[0], RectangleBox[{16, 16}, {19, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{15, 20}, {20, 25}]}, 
       {GrayLevel[0], RectangleBox[{16, 21}, {19, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{15, 25}, {20, 30}]}, 
       {GrayLevel[0], RectangleBox[{16, 26}, {19, 29}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{20, 0}, {25, 5}]}, 
       {GrayLevel[0], RectangleBox[{21, 1}, {24, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{20, 5}, {25, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{21, 6}, {24, 9}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{25, 0}, {30, 5}]}, 
       {GrayLevel[0], RectangleBox[{26, 1}, {29, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{25, 5}, {30, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{26, 6}, {29, 9}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{30, 0}, {35, 5}]}, 
       {GrayLevel[0], RectangleBox[{31, 1}, {34, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{30, 5}, {35, 10}]}, 
       {GrayLevel[0], RectangleBox[{31, 6}, {34, 9}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{35, 0}, {40, 5}]}, 
       {GrayLevel[0], RectangleBox[{36, 1}, {39, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{35, 5}, {40, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{36, 6}, {39, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{35, 10}, {40, 15}]}, 
       {GrayLevel[0], RectangleBox[{36, 11}, {39, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{35, 15}, {40, 20}]}, 
       {GrayLevel[0], RectangleBox[{36, 16}, {39, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{35, 20}, {40, 25}]}, 
       {GrayLevel[0], RectangleBox[{36, 21}, {39, 24}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{40, 0}, {45, 5}]}, 
       {GrayLevel[0], RectangleBox[{41, 1}, {44, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{40, 5}, {45, 10}]}, 
       {GrayLevel[0], RectangleBox[{41, 6}, {44, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{40, 10}, {45, 15}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{41, 11}, {44, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{40, 15}, {45, 20}]}, 
       {GrayLevel[0], RectangleBox[{41, 16}, {44, 19}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{45, 0}, {50, 5}]}, 
       {GrayLevel[0], RectangleBox[{46, 1}, {49, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 5}, {50, 10}]}, 
       {GrayLevel[0], RectangleBox[{46, 6}, {49, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 10}, {50, 15}]}, 
       {GrayLevel[0], RectangleBox[{46, 11}, {49, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 15}, {50, 20}]}, 
       {GrayLevel[0], RectangleBox[{46, 16}, {49, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 20}, {50, 25}]}, 
       {GrayLevel[0], RectangleBox[{46, 21}, {49, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 25}, {50, 30}]}, 
       {GrayLevel[0], RectangleBox[{46, 26}, {49, 29}]}}, {
       {GrayLevel[0.5], RectangleBox[{45, 30}, {50, 35}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{46, 31}, {49, 34}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{50, 0}, {55, 5}]}, 
       {GrayLevel[0], RectangleBox[{51, 1}, {54, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 5}, {55, 10}]}, 
       {GrayLevel[0], RectangleBox[{51, 6}, {54, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 10}, {55, 15}]}, 
       {GrayLevel[0], RectangleBox[{51, 11}, {54, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 15}, {55, 20}]}, 
       {GrayLevel[0], RectangleBox[{51, 16}, {54, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 20}, {55, 25}]}, 
       {GrayLevel[0], RectangleBox[{51, 21}, {54, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 25}, {55, 30}]}, 
       {GrayLevel[0], RectangleBox[{51, 26}, {54, 29}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 30}, {55, 35}]}, 
       {GrayLevel[0], RectangleBox[{51, 31}, {54, 34}]}}, {
       {GrayLevel[0.5], RectangleBox[{50, 35}, {55, 40}]}, 
       {GrayLevel[0], RectangleBox[{51, 36}, {54, 39}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{55, 0}, {60, 5}]}, 
       {GrayLevel[0], RectangleBox[{56, 1}, {59, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{55, 5}, {60, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{56, 6}, {59, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{55, 10}, {60, 15}]}, 
       {GrayLevel[0], RectangleBox[{56, 11}, {59, 14}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{60, 0}, {65, 5}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{61, 1}, {64, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{60, 5}, {65, 10}]}, 
       {GrayLevel[0], RectangleBox[{61, 6}, {64, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{60, 10}, {65, 15}]}, 
       {GrayLevel[0], RectangleBox[{61, 11}, {64, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{60, 15}, {65, 20}]}, 
       {GrayLevel[0], RectangleBox[{61, 16}, {64, 19}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{65, 0}, {70, 5}]}, 
       {GrayLevel[0], RectangleBox[{66, 1}, {69, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{65, 5}, {70, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{66, 6}, {69, 9}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{70, 0}, {75, 5}]}, 
       {GrayLevel[0], RectangleBox[{71, 1}, {74, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{70, 5}, {75, 10}]}, 
       {GrayLevel[0], RectangleBox[{71, 6}, {74, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{70, 10}, {75, 15}]}, 
       {GrayLevel[0], RectangleBox[{71, 11}, {74, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{70, 15}, {75, 20}]}, 
       {GrayLevel[0], RectangleBox[{71, 16}, {74, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{70, 20}, {75, 25}]}, 
       {GrayLevel[0], RectangleBox[{71, 21}, {74, 24}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{75, 0}, {80, 5}]}, 
       {GrayLevel[0], RectangleBox[{76, 1}, {79, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{75, 5}, {80, 10}]}, 
       {GrayLevel[0], RectangleBox[{76, 6}, {79, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{75, 10}, {80, 15}]}, 
       {GrayLevel[0], RectangleBox[{76, 11}, {79, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{75, 15}, {80, 20}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{76, 16}, {79, 19}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{80, 0}, {85, 5}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{81, 1}, {84, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{80, 5}, {85, 10}]}, 
       {GrayLevel[0], RectangleBox[{81, 6}, {84, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{80, 10}, {85, 15}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{81, 11}, {84, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{80, 15}, {85, 20}]}, 
       {GrayLevel[0], RectangleBox[{81, 16}, {84, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{80, 20}, {85, 25}]}, 
       {GrayLevel[0], RectangleBox[{81, 21}, {84, 24}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{85, 0}, {90, 5}]}, 
       {GrayLevel[0], RectangleBox[{86, 1}, {89, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{85, 5}, {90, 10}]}, 
       {GrayLevel[0], RectangleBox[{86, 6}, {89, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{85, 10}, {90, 15}]}, 
       {GrayLevel[0], RectangleBox[{86, 11}, {89, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{85, 15}, {90, 20}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{86, 16}, {89, 19}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{90, 0}, {95, 5}]}, 
       {GrayLevel[0], RectangleBox[{91, 1}, {94, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 5}, {95, 10}]}, 
       {GrayLevel[0], RectangleBox[{91, 6}, {94, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 10}, {95, 15}]}, 
       {GrayLevel[0], RectangleBox[{91, 11}, {94, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 15}, {95, 20}]}, 
       {GrayLevel[0], RectangleBox[{91, 16}, {94, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 20}, {95, 25}]}, 
       {GrayLevel[0], RectangleBox[{91, 21}, {94, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 25}, {95, 30}]}, 
       {GrayLevel[0], RectangleBox[{91, 26}, {94, 29}]}}, {
       {GrayLevel[0.5], RectangleBox[{90, 30}, {95, 35}]}, 
       {GrayLevel[0], RectangleBox[{91, 31}, {94, 34}]}}}, {{
       {GrayLevel[0.5], RectangleBox[{95, 0}, {100, 5}]}, 
       {GrayLevel[0], RectangleBox[{96, 1}, {99, 4}]}}, {
       {GrayLevel[0.5], RectangleBox[{95, 5}, {100, 10}]}, 
       {RGBColor[1, 1, 0], RectangleBox[{96, 6}, {99, 9}]}}, {
       {GrayLevel[0.5], RectangleBox[{95, 10}, {100, 15}]}, 
       {GrayLevel[0], RectangleBox[{96, 11}, {99, 14}]}}, {
       {GrayLevel[0.5], RectangleBox[{95, 15}, {100, 20}]}, 
       {GrayLevel[0], RectangleBox[{96, 16}, {99, 19}]}}, {
       {GrayLevel[0.5], RectangleBox[{95, 20}, {100, 25}]}, 
       {GrayLevel[0], RectangleBox[{96, 21}, {99, 24}]}}, {
       {GrayLevel[0.5], RectangleBox[{95, 25}, {100, 30}]}, 
       {GrayLevel[0], RectangleBox[{96, 26}, {99, 29}]}}}}}}]], "Output",
 CellChangeTimes->{{3.660161339535673*^9, 3.660161355691473*^9}, {
   3.6601613910330687`*^9, 3.660161422617456*^9}, {3.660161454176827*^9, 
   3.6601615313388*^9}, {3.660161565959392*^9, 3.6601615894649143`*^9}, {
   3.6601616380097857`*^9, 3.660161657916375*^9}, 3.6601620985656033`*^9, 
   3.6601621978285923`*^9, 3.660162274811543*^9, {3.66016254617799*^9, 
   3.660162588696954*^9}, {3.660162626093479*^9, 3.660162753664909*^9}, 
   3.660163032627562*^9, {3.660163136450815*^9, 3.66016314025574*^9}, 
   3.660216562818886*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["In-Class Activity", "Section",
 CellChangeTimes->{{3.647716402186221*^9, 3.647716405353856*^9}, {
  3.6583374723271*^9, 3.658337478437811*^9}}],

Cell[CellGroupData[{

Cell["\<\
Draw a picture using the Graphics command. Use a mixture of random and \
non-random coordinates to place objects in the scene (e.g., trees, \
snowflakes, clouds, cars, people, etc.)\
\>", "Subsection",
 CellChangeTimes->{{3.6585985738749638`*^9, 3.658598614379313*^9}, {
  3.658599141910213*^9, 3.6585991431873426`*^9}, {3.660164192162827*^9, 
  3.660164240056714*^9}, {3.660218416684717*^9, 3.660218418291705*^9}}],

Cell["NAME:", "Subsubsection",
 CellChangeTimes->{{3.658337538475717*^9, 3.658337539778943*^9}}],

Cell["STUDENT NUMBER:", "Subsubsection",
 CellChangeTimes->{{3.658337543114833*^9, 3.658337546026588*^9}}],

Cell["DATE:", "Subsubsection",
 CellChangeTimes->{{3.6583375490023537`*^9, 3.658337550162354*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Upload your notebook", "Section",
 CellChangeTimes->{{3.649950784924818*^9, 3.649950788859275*^9}}],

Cell["\<\
Don\[CloseCurlyQuote]t forget to upload a copy of your notebook for this day\
\[CloseCurlyQuote]s class to the OWL Site for the course\
\>", "Text",
 CellChangeTimes->{{3.649950792779258*^9, 3.649950818634288*^9}, {
  3.658337509093232*^9, 3.658337512508254*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1226, 956},
WindowMargins->{{Automatic, 35}, {Automatic, 52}},
TaggingRules->{"SlideShow" -> True},
Magnification:>1.25 Inherited,
FrontEndVersion->"10.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 6, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 4299, 96, 75, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[5767, 146, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[9708, 275, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[13391, 384, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[161488, 4562, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[197481, 5312, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[225466, 5975, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[226524, 6009, 64, 1, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 227401, 6039}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 4299, 96, 75, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[4882, 120, 483, 10, 183, "Title"],
Cell[5368, 132, 362, 9, 99, "Subtitle"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5767, 146, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[5856, 151, 201, 3, 80, "Section"],
Cell[6060, 156, 393, 9, 61, "Text"],
Cell[CellGroupData[{
Cell[6478, 169, 235, 4, 36, "Input"],
Cell[6716, 175, 146, 3, 35, "Output"]
}, Open  ]],
Cell[6877, 181, 183, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[7085, 189, 305, 5, 36, "Input"],
Cell[7393, 196, 140, 3, 35, "Output"]
}, Open  ]],
Cell[7548, 202, 327, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[7900, 214, 365, 8, 36, "Input"],
Cell[8268, 224, 1379, 44, 57, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9708, 275, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[9797, 280, 155, 2, 80, "Section"],
Cell[9955, 284, 290, 6, 37, "Text"],
Cell[10248, 292, 375, 12, 36, "Input"],
Cell[10626, 306, 202, 4, 37, "Text"],
Cell[10831, 312, 483, 12, 57, "Input"],
Cell[11317, 326, 111, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[11453, 331, 294, 6, 36, "Input"],
Cell[11750, 339, 405, 8, 467, "Output"]
}, Open  ]],
Cell[12170, 350, 109, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[12304, 355, 347, 7, 36, "Input"],
Cell[12654, 364, 676, 13, 467, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13391, 384, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[13480, 389, 160, 2, 80, "Section"],
Cell[13643, 393, 503, 10, 61, "Text"],
Cell[CellGroupData[{
Cell[14171, 407, 285, 6, 35, "Input"],
Cell[14459, 415, 1506, 42, 35, "Output"]
}, Open  ]],
Cell[15980, 460, 369, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[16374, 472, 511, 12, 35, "Input"],
Cell[16888, 486, 1452, 41, 35, "Output"]
}, Open  ]],
Cell[18355, 530, 174, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[18554, 538, 415, 12, 35, "Input"],
Cell[18972, 552, 142455, 4003, 78, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[161488, 4562, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[161577, 4567, 221, 3, 80, "Section"],
Cell[161801, 4572, 523, 8, 85, "Text"],
Cell[CellGroupData[{
Cell[162349, 4584, 109, 1, 54, "Subsection"],
Cell[162461, 4587, 673, 15, 85, "Text"],
Cell[163137, 4604, 1386, 38, 78, "Input"],
Cell[164526, 4644, 345, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[164896, 4654, 360, 9, 36, "Input"],
Cell[165259, 4665, 490, 10, 475, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[165798, 4681, 98, 1, 54, "Subsection"],
Cell[165899, 4684, 553, 13, 61, "Text"],
Cell[166455, 4699, 912, 21, 57, "Input"],
Cell[167370, 4722, 122, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[167517, 4727, 460, 10, 36, "Input"],
Cell[167980, 4739, 858, 16, 558, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168887, 4761, 113, 1, 54, "Subsection"],
Cell[169003, 4764, 1446, 37, 156, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170486, 4806, 105, 1, 54, "Subsection"],
Cell[170594, 4809, 709, 15, 85, "Text"],
Cell[171306, 4826, 397, 11, 57, "Input"],
Cell[171706, 4839, 129, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[171860, 4844, 472, 12, 36, "Input"],
Cell[172335, 4858, 12715, 222, 220, "Output"]
}, Open  ]],
Cell[185065, 5083, 130, 1, 37, "Text"],
Cell[CellGroupData[{
Cell[185220, 5088, 439, 9, 36, "Input"],
Cell[185662, 5099, 11523, 197, 467, "Output"]
}, Open  ]],
Cell[197200, 5299, 220, 6, 37, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197481, 5312, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[197570, 5317, 199, 3, 80, "Section"],
Cell[197772, 5322, 184, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[197981, 5330, 107, 1, 54, "Subsection"],
Cell[198091, 5333, 551, 11, 61, "Text"],
Cell[CellGroupData[{
Cell[198667, 5348, 520, 14, 36, "Input"],
Cell[199190, 5364, 573, 11, 467, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[199812, 5381, 108, 1, 54, "Subsection"],
Cell[199923, 5384, 300, 6, 37, "Text"],
Cell[200226, 5392, 166, 5, 75, "Program"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200429, 5402, 103, 1, 54, "Subsection"],
Cell[200535, 5405, 397, 7, 61, "Text"],
Cell[200935, 5414, 382, 8, 61, "Text"],
Cell[CellGroupData[{
Cell[201342, 5426, 89, 2, 36, "Input"],
Cell[201434, 5430, 70, 1, 35, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[201553, 5437, 115, 1, 54, "Subsection"],
Cell[201671, 5440, 552, 9, 61, "Text"],
Cell[CellGroupData[{
Cell[202248, 5453, 734, 20, 57, "Input"],
Cell[202985, 5475, 282, 7, 460, "Output"]
}, Open  ]],
Cell[203282, 5485, 355, 6, 37, "Text"],
Cell[CellGroupData[{
Cell[203662, 5495, 324, 9, 36, "Input"],
Cell[203989, 5506, 175, 5, 35, "Output"]
}, Open  ]],
Cell[204179, 5514, 512, 8, 61, "Text"],
Cell[CellGroupData[{
Cell[204716, 5526, 1224, 33, 78, "Input"],
Cell[205943, 5561, 723, 15, 460, "Output"]
}, Open  ]],
Cell[206681, 5579, 460, 8, 61, "Text"],
Cell[CellGroupData[{
Cell[207166, 5591, 402, 10, 36, "Input"],
Cell[207571, 5603, 139, 3, 35, "Output"]
}, Open  ]],
Cell[207725, 5609, 373, 7, 61, "Text"],
Cell[CellGroupData[{
Cell[208123, 5620, 1596, 43, 99, "Input"],
Cell[209722, 5665, 783, 16, 460, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[210554, 5687, 106, 1, 54, "Subsection"],
Cell[210663, 5690, 205, 4, 37, "Text"],
Cell[210871, 5696, 1403, 36, 78, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212311, 5737, 105, 1, 54, "Subsection"],
Cell[212419, 5740, 234, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[212678, 5748, 516, 11, 36, "Input"],
Cell[213197, 5761, 12196, 206, 467, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[225466, 5975, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[225555, 5980, 149, 2, 80, "Section"],
Cell[CellGroupData[{
Cell[225729, 5986, 425, 7, 85, "Subsection"],
Cell[226157, 5995, 96, 1, 43, "Subsubsection"],
Cell[226256, 5998, 106, 1, 34, "Subsubsection"],
Cell[226365, 6001, 98, 1, 34, "Subsubsection"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[226524, 6009, 64, 1, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[226613, 6014, 105, 1, 80, "Section"],
Cell[226721, 6017, 273, 5, 37, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
